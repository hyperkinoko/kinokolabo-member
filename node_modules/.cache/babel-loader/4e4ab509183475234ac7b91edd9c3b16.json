{"remainingRequest":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/babel-loader/lib/index.js!/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kinoko/work/kinokolabo/kinokolabo-member/src/components/MemberForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/src/components/MemberForm.vue","mtime":1616758342214},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport axiosJsonpAdapter from 'axios-jsonp';\nvar ZIPCODE_API_URL = 'http://zipcloud.ibsnet.co.jp/api/search';\nexport default {\n  name: \"MemberForm\",\n  data: function data() {\n    return {\n      memberForm: {\n        id: 0,\n        name: \"\",\n        // firstName: \"\",\n        nameKana: \"\",\n        // firstKanaName: \"\",\n        zip: \"\",\n        pref: 0,\n        addr: \"\",\n        tel1: \"\",\n        tel2: \"\",\n        mail: \"\" // passwd : \"\"\n\n      },\n      prefs: [{\n        \"code\": 0,\n        \"name\": \"選択してください\"\n      }, {\n        \"code\": 1,\n        \"name\": \"北海道\"\n      }, {\n        \"code\": 2,\n        \"name\": \"青森県\"\n      }, {\n        \"code\": 3,\n        \"name\": \"岩手県\"\n      }, {\n        \"code\": 4,\n        \"name\": \"宮城県\"\n      }, {\n        \"code\": 5,\n        \"name\": \"秋田県\"\n      }, {\n        \"code\": 6,\n        \"name\": \"山形県\"\n      }, {\n        \"code\": 7,\n        \"name\": \"福島県\"\n      }, {\n        \"code\": 8,\n        \"name\": \"茨城県\"\n      }, {\n        \"code\": 9,\n        \"name\": \"栃木県\"\n      }, {\n        \"code\": 10,\n        \"name\": \"群馬県\"\n      }, {\n        \"code\": 11,\n        \"name\": \"埼玉県\"\n      }, {\n        \"code\": 12,\n        \"name\": \"千葉県\"\n      }, {\n        \"code\": 13,\n        \"name\": \"東京都\"\n      }, {\n        \"code\": 14,\n        \"name\": \"神奈川県\"\n      }, {\n        \"code\": 15,\n        \"name\": \"新潟県\"\n      }, {\n        \"code\": 16,\n        \"name\": \"富山県\"\n      }, {\n        \"code\": 17,\n        \"name\": \"石川県\"\n      }, {\n        \"code\": 18,\n        \"name\": \"福井県\"\n      }, {\n        \"code\": 19,\n        \"name\": \"山梨県\"\n      }, {\n        \"code\": 20,\n        \"name\": \"長野県\"\n      }, {\n        \"code\": 21,\n        \"name\": \"岐阜県\"\n      }, {\n        \"code\": 22,\n        \"name\": \"静岡県\"\n      }, {\n        \"code\": 23,\n        \"name\": \"愛知県\"\n      }, {\n        \"code\": 24,\n        \"name\": \"三重県\"\n      }, {\n        \"code\": 25,\n        \"name\": \"滋賀県\"\n      }, {\n        \"code\": 26,\n        \"name\": \"京都府\"\n      }, {\n        \"code\": 27,\n        \"name\": \"大阪府\"\n      }, {\n        \"code\": 28,\n        \"name\": \"兵庫県\"\n      }, {\n        \"code\": 29,\n        \"name\": \"奈良県\"\n      }, {\n        \"code\": 30,\n        \"name\": \"和歌山県\"\n      }, {\n        \"code\": 31,\n        \"name\": \"鳥取県\"\n      }, {\n        \"code\": 32,\n        \"name\": \"島根県\"\n      }, {\n        \"code\": 33,\n        \"name\": \"岡山県\"\n      }, {\n        \"code\": 34,\n        \"name\": \"広島県\"\n      }, {\n        \"code\": 35,\n        \"name\": \"山口県\"\n      }, {\n        \"code\": 36,\n        \"name\": \"徳島県\"\n      }, {\n        \"code\": 37,\n        \"name\": \"香川県\"\n      }, {\n        \"code\": 38,\n        \"name\": \"愛媛県\"\n      }, {\n        \"code\": 39,\n        \"name\": \"高知県\"\n      }, {\n        \"code\": 40,\n        \"name\": \"福岡県\"\n      }, {\n        \"code\": 41,\n        \"name\": \"佐賀県\"\n      }, {\n        \"code\": 42,\n        \"name\": \"長崎県\"\n      }, {\n        \"code\": 43,\n        \"name\": \"熊本県\"\n      }, {\n        \"code\": 44,\n        \"name\": \"大分県\"\n      }, {\n        \"code\": 45,\n        \"name\": \"宮崎県\"\n      }, {\n        \"code\": 46,\n        \"name\": \"鹿児島県\"\n      }, {\n        \"code\": 47,\n        \"name\": \"沖縄県\"\n      }],\n      rules: {\n        name: [{\n          required: true,\n          message: '入力必須です',\n          trigger: 'blur'\n        }],\n        // ame: [\n        //     {\n        //         validator: (rule, value, callback) => {\n        //             if (!value) {\n        //                 return callback(new Error('お名前は必須事項です'));\n        //             }\n        //         },\n        //         trigger: 'blur'\n        //     }\n        // ],\n        nameKana: [{\n          required: true,\n          message: '入力必須です',\n          trigger: 'blur'\n        }, {\n          pattern: /^[ァ-ヶー　 ]*$/,\n          message: '全角カタカナで',\n          trigger: 'blur'\n        }],\n        // ame: [\n        //     {\n        //         validator: (rule, value, callback) => {\n        //             if (!value) {\n        //                 return callback(new Error('フリガナは必須事項です'));\n        //             }\n        //             if(!value.match(/^[ァ-ヶー　]*$/)) {\n        //                 return callback(new Error('全角カタカナで入力してください'));\n        //             }\n        //         },\n        //         trigger: 'blur'\n        //     }\n        // ],\n        zip: [{\n          required: true,\n          message: '入力必須です',\n          trigger: 'blur'\n        }, {\n          pattern: /^[0-9]{7}$/,\n          message: '半角数字7桁',\n          trigger: 'blur'\n        }],\n        pref: [{\n          required: true,\n          message: '入力必須です',\n          trigger: 'blur'\n        }],\n        addr: [{\n          required: true,\n          message: '入力必須です',\n          trigger: 'blur'\n        }],\n        tel1: [{\n          pattern: /^[0-9]{10}$|^[0-9]{11}$/,\n          message: '半角数字で入力してください',\n          trigger: 'blur'\n        }],\n        tel2: [{\n          pattern: /^[0-9]{10}$|^[0-9]{11}$/,\n          message: '半角数字で入力してください',\n          trigger: 'blur'\n        }],\n        mail: [{\n          type: \"email\",\n          message: 'メールアドレスが間違っています',\n          trigger: 'blur'\n        }] // passwd: [\n        //     { required: true, message: '入力必須です', trigger: 'blur' },\n        // ],\n\n      }\n    };\n  },\n  methods: {\n    regist: function regist() {\n      var _this = this;\n\n      this.$refs['memberForm'].validate(function (valied) {\n        if (valied) {\n          axios.post('https://kinokolabo.herokuapp.com/member/regist', _this.memberForm).then(function (res) {\n            console.log(\"登録完了 idは\" + res.data + \"です\");\n\n            _this.$router.push(\"/student/regist?guardian=\" + res.data);\n          }).catch(function (error) {\n            alert(\"エラー発生:\" + error);\n          });\n        }\n      });\n    },\n    fetchAddress: function () {\n      var _fetchAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var reg, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 郵便番号のバリデーションチェック\n                reg = /^\\d{7}$/;\n\n                if (reg.test(this.memberForm.zip)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return axios.get(ZIPCODE_API_URL, {\n                  adapter: axiosJsonpAdapter,\n                  params: {\n                    zipcode: this.memberForm.zip\n                  }\n                });\n\n              case 5:\n                res = _context.sent;\n\n                if (!(res.status !== 200)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 8:\n                // 返却されたデータを挿入する\n                this.memberForm.pref = res.data.results[0].address1;\n                this.memberForm.addr = res.data.results[0].address2 + res.data.results[0].address3;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchAddress() {\n        return _fetchAddress.apply(this, arguments);\n      }\n\n      return fetchAddress;\n    }()\n  }\n};",{"version":3,"sources":["MemberForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-form :model=\"memberForm\" :rules=\"rules\" ref=\"memberForm\" label-width=\"200px\" style=\"width: 700px\" class=\"container\">\n        <el-form-item label=\"お名前\" prop=\"name\">\n            <el-input type=\"text\" v-model=\"memberForm.name\" auto-complete=\"off\" class=\"col-10\"></el-input>\n<!--            <el-input type=\"text\" v-model=\"memberForm.firstName\" auto-complete=\"off\"></el-input>-->\n        </el-form-item>\n        <el-form-item label=\"フリガナ\" prop=\"nameKana\">\n            <el-input type=\"text\" v-model=\"memberForm.nameKana\" auto-complete=\"off\" class=\"col-10\"></el-input>\n<!--           <el-input type=\"text\" v-model=\"memberForm.firstKanaName\" auto-complete=\"off\"></el-input>-->\n        </el-form-item>\n        <el-form-item label=\"郵便番号\" prop=\"zip\">\n            <el-input type=\"text\" v-model=\"memberForm.zip\" auto-complete=\"off\" class=\"col-5\"></el-input>\n            <el-button @click=\"fetchAddress\" class=\"col-4\">郵便番号→住所</el-button>\n        </el-form-item>\n        <el-form-item label=\"都道府県\" prop=\"pref\">\n            <el-select v-model=\"memberForm.pref\" placeholder=\"Select\">\n                <el-option\n                        v-for=\"item in prefs\"\n                        :key=\"item.code\"\n                        :label=\"item.name\"\n                        :value=\"item.code\">\n                </el-option>\n            </el-select>\n        </el-form-item>\n        <el-form-item label=\"住所\" prop=\"addr\">\n                <el-input type=\"text\" v-model=\"memberForm.addr\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"電話番号（自宅）\" prop=\"tel1\">\n            <el-input type=\"tel\" v-model=\"memberForm.tel1\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"電話番号（携帯）\" prop=\"tel2\">\n            <el-input type=\"tel\" v-model=\"memberForm.tel2\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"メールアドレス\" prop=\"mail\">\n            <el-input type=\"mail\" v-model=\"memberForm.mail\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n<!--        <el-form-item label=\"パスワード\" prop=\"passwd\">-->\n<!--            <el-input type=\"password\" v-model=\"memberForm.passwd\" auto-complete=\"off\"></el-input>-->\n<!--        </el-form-item>-->\n        <el-button type=\"primary\" @click=\"regist\">登録</el-button>\n    </el-form>\n</template>\n\n\n<script>\n    import axios from 'axios'\n    import axiosJsonpAdapter from 'axios-jsonp'\n\n    const ZIPCODE_API_URL = 'http://zipcloud.ibsnet.co.jp/api/search'\n\n    export default {\n        name: \"MemberForm\",\n        data() {\n            return {\n                memberForm: {\n                    id: 0,\n                    name: \"\",\n                    // firstName: \"\",\n                    nameKana: \"\",\n                    // firstKanaName: \"\",\n                    zip: \"\",\n                    pref: 0,\n                    addr : \"\",\n                    tel1: \"\",\n                    tel2: \"\",\n                    mail: \"\",\n                    // passwd : \"\"\n                },\n                prefs: [\n                    { \"code\": 0, \"name\": \"選択してください\"},\n                    { \"code\": 1, \"name\": \"北海道\"},\n                    { \"code\": 2, \"name\": \"青森県\"},\n                    { \"code\": 3, \"name\": \"岩手県\"},\n                    { \"code\": 4, \"name\": \"宮城県\"},\n                    { \"code\": 5, \"name\": \"秋田県\"},\n                    { \"code\": 6, \"name\": \"山形県\"},\n                    { \"code\": 7, \"name\": \"福島県\"},\n                    { \"code\": 8, \"name\": \"茨城県\"},\n                    { \"code\": 9, \"name\": \"栃木県\"},\n                    { \"code\": 10, \"name\": \"群馬県\"},\n                    { \"code\": 11, \"name\": \"埼玉県\"},\n                    { \"code\": 12, \"name\": \"千葉県\"},\n                    { \"code\": 13, \"name\": \"東京都\"},\n                    { \"code\": 14, \"name\": \"神奈川県\"},\n                    { \"code\": 15, \"name\": \"新潟県\"},\n                    { \"code\": 16, \"name\": \"富山県\"},\n                    { \"code\": 17, \"name\": \"石川県\"},\n                    { \"code\": 18, \"name\": \"福井県\"},\n                    { \"code\": 19, \"name\": \"山梨県\"},\n                    { \"code\": 20, \"name\": \"長野県\"},\n                    { \"code\": 21, \"name\": \"岐阜県\"},\n                    { \"code\": 22, \"name\": \"静岡県\"},\n                    { \"code\": 23, \"name\": \"愛知県\"},\n                    { \"code\": 24, \"name\": \"三重県\"},\n                    { \"code\": 25, \"name\": \"滋賀県\"},\n                    { \"code\": 26, \"name\": \"京都府\"},\n                    { \"code\": 27, \"name\": \"大阪府\"},\n                    { \"code\": 28, \"name\": \"兵庫県\"},\n                    { \"code\": 29, \"name\": \"奈良県\"},\n                    { \"code\": 30, \"name\": \"和歌山県\"},\n                    { \"code\": 31, \"name\": \"鳥取県\"},\n                    { \"code\": 32, \"name\": \"島根県\"},\n                    { \"code\": 33, \"name\": \"岡山県\"},\n                    { \"code\": 34, \"name\": \"広島県\"},\n                    { \"code\": 35, \"name\": \"山口県\"},\n                    { \"code\": 36, \"name\": \"徳島県\"},\n                    { \"code\": 37, \"name\": \"香川県\"},\n                    { \"code\": 38, \"name\": \"愛媛県\"},\n                    { \"code\": 39, \"name\": \"高知県\"},\n                    { \"code\": 40, \"name\": \"福岡県\"},\n                    { \"code\": 41, \"name\": \"佐賀県\"},\n                    { \"code\": 42, \"name\": \"長崎県\"},\n                    { \"code\": 43, \"name\": \"熊本県\"},\n                    { \"code\": 44, \"name\": \"大分県\"},\n                    { \"code\": 45, \"name\": \"宮崎県\"},\n                    { \"code\": 46, \"name\": \"鹿児島県\"},\n                    { \"code\": 47, \"name\": \"沖縄県\"}\n                    ],\n                rules: {\n                    name: [\n                        { required: true, message: '入力必須です', trigger: 'blur' }\n                    ],\n                    // ame: [\n                    //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('お名前は必須事項です'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    // ],\n                    nameKana: [\n                        { required: true, message: '入力必須です', trigger: 'blur' },\n                        { pattern: /^[ァ-ヶー　 ]*$/, message: '全角カタカナで', trigger: 'blur' },\n\n                        // {\n                        //     validator: (rule, value, callback) => {\n                        //         if (!value) {\n                        //             return callback(new Error('フリガナは必須事項です'));\n                        //         }\n                        //         if(!value.match(/^[ァ-ヶー　]*$/)) {\n                        //             return callback(new Error('全角カタカナで入力してください'));\n                        //         }\n                        //     },\n                        //     trigger: 'blur'\n                        // }\n                    ],\n                    // ame: [\n                    //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('フリガナは必須事項です'));\n                    //             }\n                    //             if(!value.match(/^[ァ-ヶー　]*$/)) {\n                    //                 return callback(new Error('全角カタカナで入力してください'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    // ],\n                    zip: [\n                        { required: true, message: '入力必須です', trigger: 'blur' },\n                        { pattern: /^[0-9]{7}$/, message: '半角数字7桁', trigger: 'blur' },\n                        // {\n                        //     validator: (rule, value, callback) => {\n                        //         if (!value) {\n                        //             return callback(new Error('郵便番号は必須事項です'));\n                        //         }\n                        //         if(!value.match(/^[0-9]{7}$/)) {\n                        //             return callback(new Error('半角数字7桁で入力してください'));\n                        //         }\n                        //     },\n                        //     trigger: 'blur'\n                        // }\n                    ],\n                    pref: [\n                        { required: true, message: '入力必須です', trigger: 'blur' },\n                        // { type : \"number\", min: 1, message: '選択してください', trigger: 'change' },\n                    //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (value === 0) {\n                    //                 return callback(new Error('都道府県を選択してください'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    ],\n                    addr: [\n                        { required: true, message: '入力必須です', trigger: 'blur' },\n                        //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('住所は必須事項です'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    ],\n                    tel1: [\n                        { pattern: /^[0-9]{10}$|^[0-9]{11}$/, message: '半角数字で入力してください', trigger: 'blur' },\n                    //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('電話番号は必須事項です'));\n                    //             }\n                    //             if(!(value.match(/^[0-9]{10}$|^[0-9]{11}$/))) {\n                    //                 return callback(new Error('半角数字で入力してください'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    ],\n                    tel2: [\n                        { pattern: /^[0-9]{10}$|^[0-9]{11}$/, message: '半角数字で入力してください', trigger: 'blur' },\n                    ],\n                    mail: [\n                        { type: \"email\", message: 'メールアドレスが間違っています', trigger: 'blur' },\n                        //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('メールアドレスは必須事項です'));\n                    //             }\n                    //             if(!value.match(/^[\\w_\\-\\.]+@[\\w\\-\\.]+\\.\\w{2,}$/)) {\n                    //                 return callback(new Error('半角英数字で入力してください'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    ],\n                    // passwd: [\n                    //     { required: true, message: '入力必須です', trigger: 'blur' },\n                    // ],\n                }\n            }\n        },\n        methods : {\n            regist() {\n                this.$refs['memberForm'].validate((valied) => {\n                    if(valied) {\n                        axios.post('https://kinokolabo.herokuapp.com/member/regist', this.memberForm)\n                            .then(res => {\n                                console.log(\"登録完了 idは\" + res.data + \"です\")\n                                this.$router.push(\"/student/regist?guardian=\" + res.data)\n                            })\n                            .catch(error => {\n                                alert(\"エラー発生:\" + error)\n                            })\n                    }\n                });\n            },\n            async fetchAddress() {\n                // 郵便番号のバリデーションチェック\n                const reg = /^\\d{7}$/\n                if (!reg.test(this.memberForm.zip)) return\n\n                // 住所apiを叩く\n                const res = await axios.get(ZIPCODE_API_URL, {\n                    adapter: axiosJsonpAdapter,\n                    params: {\n                        zipcode: this.memberForm.zip\n                    }\n                })\n\n                // 存在しない郵便番号でapiを叩くと200以外のステータスが返ってくる\n                if (res.status !== 200) return\n\n                // 返却されたデータを挿入する\n                this.memberForm.pref = res.data.results[0].address1\n                this.memberForm.addr = res.data.results[0].address2 + res.data.results[0].address3\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    el-button {\n\n    }\n\n</style>\n"],"sourceRoot":"src/components"}]}