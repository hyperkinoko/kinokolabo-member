{"remainingRequest":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kinoko/work/kinokolabo/kinokolabo-member/src/components/StudentForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/src/components/StudentForm.vue","mtime":1561961842365},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kinoko/work/kinokolabo/kinokolabo-member/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\n\nexport default {\n    name: \"StudentForm\",\n    data() {\n        return {\n            sameAs : false,\n            studentForm: {\n                guardianId : this.$route.query.guardian,\n                memberId : 0,\n                id: 0,\n                name: \"\",\n                // firstName: \"\",\n                nameKana: \"\",\n                // firstKanaName: \"\",\n                zip: \"\",\n                pref: 0,\n                addr : \"\",\n                tel1: \"\",\n                tel2: \"\",\n                mail: \"\",\n                notice : true,\n                bYear : \"\",\n                bMonth : \"\",\n                bDay : \"\",\n                // passwd : \"\"\n            },\n            years: [],\n            prefs: [\n                { \"code\": 0, \"name\": \"選択してください\"},\n                { \"code\": 1, \"name\": \"北海道\"},\n                { \"code\": 2, \"name\": \"青森県\"},\n                { \"code\": 3, \"name\": \"岩手県\"},\n                { \"code\": 4, \"name\": \"宮城県\"},\n                { \"code\": 5, \"name\": \"秋田県\"},\n                { \"code\": 6, \"name\": \"山形県\"},\n                { \"code\": 7, \"name\": \"福島県\"},\n                { \"code\": 8, \"name\": \"茨城県\"},\n                { \"code\": 9, \"name\": \"栃木県\"},\n                { \"code\": 10, \"name\": \"群馬県\"},\n                { \"code\": 11, \"name\": \"埼玉県\"},\n                { \"code\": 12, \"name\": \"千葉県\"},\n                { \"code\": 13, \"name\": \"東京都\"},\n                { \"code\": 14, \"name\": \"神奈川県\"},\n                { \"code\": 15, \"name\": \"新潟県\"},\n                { \"code\": 16, \"name\": \"富山県\"},\n                { \"code\": 17, \"name\": \"石川県\"},\n                { \"code\": 18, \"name\": \"福井県\"},\n                { \"code\": 19, \"name\": \"山梨県\"},\n                { \"code\": 20, \"name\": \"長野県\"},\n                { \"code\": 21, \"name\": \"岐阜県\"},\n                { \"code\": 22, \"name\": \"静岡県\"},\n                { \"code\": 23, \"name\": \"愛知県\"},\n                { \"code\": 24, \"name\": \"三重県\"},\n                { \"code\": 25, \"name\": \"滋賀県\"},\n                { \"code\": 26, \"name\": \"京都府\"},\n                { \"code\": 27, \"name\": \"大阪府\"},\n                { \"code\": 28, \"name\": \"兵庫県\"},\n                { \"code\": 29, \"name\": \"奈良県\"},\n                { \"code\": 30, \"name\": \"和歌山県\"},\n                { \"code\": 31, \"name\": \"鳥取県\"},\n                { \"code\": 32, \"name\": \"島根県\"},\n                { \"code\": 33, \"name\": \"岡山県\"},\n                { \"code\": 34, \"name\": \"広島県\"},\n                { \"code\": 35, \"name\": \"山口県\"},\n                { \"code\": 36, \"name\": \"徳島県\"},\n                { \"code\": 37, \"name\": \"香川県\"},\n                { \"code\": 38, \"name\": \"愛媛県\"},\n                { \"code\": 39, \"name\": \"高知県\"},\n                { \"code\": 40, \"name\": \"福岡県\"},\n                { \"code\": 41, \"name\": \"佐賀県\"},\n                { \"code\": 42, \"name\": \"長崎県\"},\n                { \"code\": 43, \"name\": \"熊本県\"},\n                { \"code\": 44, \"name\": \"大分県\"},\n                { \"code\": 45, \"name\": \"宮崎県\"},\n                { \"code\": 46, \"name\": \"鹿児島県\"},\n                { \"code\": 47, \"name\": \"沖縄県\"}\n                ],\n            rules: {\n                name: [\n                    { required: true, message: '入力必須です', trigger: 'blur' }\n                ],\n                // ame: [\n                //     {\n                //         validator: (rule, value, callback) => {\n                //             if (!value) {\n                //                 return callback(new Error('お名前は必須事項です'));\n                //             }\n                //         },\n                //         trigger: 'blur'\n                //     }\n                // ],\n                nameKana: [\n                    { required: true, message: '入力必須です', trigger: 'blur' },\n                    { pattern: /^[ァ-ヶー　 ]*$/, message: '全角カタカナで', trigger: 'blur' },\n\n                    // {\n                    //     validator: (rule, value, callback) => {\n                    //         if (!value) {\n                    //             return callback(new Error('フリガナは必須事項です'));\n                    //         }\n                    //         if(!value.match(/^[ァ-ヶー　]*$/)) {\n                    //             return callback(new Error('全角カタカナで入力してください'));\n                    //         }\n                    //     },\n                    //     trigger: 'blur'\n                    // }\n                ],\n                // ame: [\n                //     {\n                //         validator: (rule, value, callback) => {\n                //             if (!value) {\n                //                 return callback(new Error('フリガナは必須事項です'));\n                //             }\n                //             if(!value.match(/^[ァ-ヶー　]*$/)) {\n                //                 return callback(new Error('全角カタカナで入力してください'));\n                //             }\n                //         },\n                //         trigger: 'blur'\n                //     }\n                // ],\n                zip: [\n                    { required: true, message: '入力必須です', trigger: 'blur' },\n                    { pattern: /^[0-9]{7}$/, message: '半角数字7桁', trigger: 'blur' },\n                    // {\n                    //     validator: (rule, value, callback) => {\n                    //         if (!value) {\n                    //             return callback(new Error('郵便番号は必須事項です'));\n                    //         }\n                    //         if(!value.match(/^[0-9]{7}$/)) {\n                    //             return callback(new Error('半角数字7桁で入力してください'));\n                    //         }\n                    //     },\n                    //     trigger: 'blur'\n                    // }\n                ],\n                pref: [\n                    { required: true, message: '入力必須です', trigger: 'blur' },\n                    { type : \"number\", min: 1, message: '選択してください', trigger: 'change' },\n                //     {\n                //         validator: (rule, value, callback) => {\n                //             if (value === 0) {\n                //                 return callback(new Error('都道府県を選択してください'));\n                //             }\n                //         },\n                //         trigger: 'blur'\n                //     }\n                ],\n                addr: [\n                    { required: true, message: '入力必須です', trigger: 'blur' },\n                    //     {\n                //         validator: (rule, value, callback) => {\n                //             if (!value) {\n                //                 return callback(new Error('住所は必須事項です'));\n                //             }\n                //         },\n                //         trigger: 'blur'\n                //     }\n                ],\n                tel: [\n                    { pattern: /^[0-9]{10}$|^[0-9]{11}$/, message: '半角数字で入力してください', trigger: 'blur' },\n                //     {\n                //         validator: (rule, value, callback) => {\n                //             if (!value) {\n                //                 return callback(new Error('電話番号は必須事項です'));\n                //             }\n                //             if(!(value.match(/^[0-9]{10}$|^[0-9]{11}$/))) {\n                //                 return callback(new Error('半角数字で入力してください'));\n                //             }\n                //         },\n                //         trigger: 'blur'\n                //     }\n                ],\n                mail: [\n                    { type: \"email\", message: 'メールアドレスが間違っています', trigger: 'blur' },\n                    //     {\n                //         validator: (rule, value, callback) => {\n                //             if (!value) {\n                //                 return callback(new Error('メールアドレスは必須事項です'));\n                //             }\n                //             if(!value.match(/^[\\w_\\-\\.]+@[\\w\\-\\.]+\\.\\w{2,}$/)) {\n                //                 return callback(new Error('半角英数字で入力してください'));\n                //             }\n                //         },\n                //         trigger: 'blur'\n                //     }\n                ],\n                bYear: [\n                    {required: true, message: '入力必須です', trigger: ' blur'}\n                ],\n                bMonth: [\n                    {required: true, message: '入力必須です', trigger: ' blur'}\n                ],\n                bDay: [\n                    {required: true, message: '入力必須です', trigger: ' blur'}\n                ],\n\n                // passwd: [\n                //     { required: true, message: '入力必須です', trigger: 'blur' },\n                // ],\n            }\n        }\n    },\n    methods : {\n        fetchMemberId() {\n            if(this.sameAs) {\n                this.studentForm.memberId = this.$route.query.guardian\n                this.studentForm.notice = false\n            } else {\n                this.studentForm.memberId = 0\n                this.studentForm.notice = true\n            }\n        },\n        fetchDay() {\n            const year = this.studentForm.bYear\n            const month = this.studentForm.bMonth\n            const day = this.studentForm.bDay\n            if(year !== '' && month !== '' && day !== '') {\n                const lastDay = new Date(year, month, 0).getDate()\n                if(day > lastDay) {\n                    this.studentForm.bDay = 1\n                }\n            }\n        },\n        getYears() {\n            let years = new Array()\n            const thisYear = new Date().getFullYear()\n            for(let y = 1920; y < thisYear; y++) {\n                years.push({\"value\": y})\n            }\n            return years\n        },\n        getMonths() {\n            let months = new Array()\n            for(let m = 1; m <= 12; m++) {\n                months.push({\"value\": m})\n            }\n            return months\n        },\n        getDays(year, month) {\n            let days = new Array()\n            const lastDay = new Date(year, month, 0).getDate()\n            for(let d = 1; d <= lastDay; d++) {\n                days.push({\"value\": d})\n            }\n            return days\n        },\n        regist() {\n            this.$refs['studentForm'].validate((valied) => {\n                if(valied) {\n                    axios.post('https://kinokolabo.herokuapp.com/student/regist', this.studentForm)\n                        .then(res => {\n                            console.log(\"登録完了 idは\" + res.data + \"です\")\n                            this.$router.push(\"/qrcode?id=\" + res.data)\n                        })\n                        .catch(error => {\n                            alert(\"エラー発生:\" + error)\n                        })\n                }\n            });\n        }\n    }\n}\n",{"version":3,"sources":["StudentForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StudentForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <el-form :model=\"studentForm\" :rules=\"rules\" ref=\"studentForm\" label-width=\"200px\" style=\"width: 700px;\">\n        <p><el-checkbox v-model=\"sameAs\" @change=\"fetchMemberId\">ご本人</el-checkbox></p>\n        <div v-if=\"!sameAs\">\n            <el-form-item label=\"お名前\" prop=\"name\">\n                <el-input type=\"text\" v-model=\"studentForm.name\" auto-complete=\"off\"></el-input>\n    <!--            <el-input type=\"text\" v-model=\"studentForm.firstName\" auto-complete=\"off\"></el-input>-->\n            </el-form-item>\n            <el-form-item label=\"フリガナ\" prop=\"nameKana\">\n                <el-input type=\"text\" v-model=\"studentForm.nameKana\" auto-complete=\"off\"></el-input>\n    <!--           <el-input type=\"text\" v-model=\"studentForm.firstKanaName\" auto-complete=\"off\"></el-input>-->\n            </el-form-item>\n            <el-form-item label=\"郵便番号\" prop=\"zip\">\n                <el-input type=\"text\" v-model=\"studentForm.zip\" auto-complete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"都道府県\" prop=\"pref\">\n                <el-select v-model=\"studentForm.pref\" placeholder=\"Select\">\n                    <el-option\n                            v-for=\"item in prefs\"\n                            :key=\"item.code\"\n                            :label=\"item.name\"\n                            :value=\"item.code\">\n                    </el-option>\n                </el-select>\n            </el-form-item>\n            <el-form-item label=\"住所\" prop=\"addr\">\n                    <el-input type=\"text\" v-model=\"studentForm.addr\" auto-complete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"電話番号\" prop=\"tel\">\n                <el-input type=\"tel\" v-model=\"studentForm.tel\" auto-complete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"メールアドレス\" prop=\"mail\">\n                <el-input type=\"mail\" v-model=\"studentForm.mail\" auto-complete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item>\n                <el-checkbox v-if=\"!sameAs\" v-model=\"studentForm.notice\">入退室を保護者さまに通知する</el-checkbox>\n            </el-form-item>\n<!--        <el-form-item label=\"パスワード\" prop=\"passwd\">-->\n<!--            <el-input type=\"password\" v-model=\"studentForm.passwd\" auto-complete=\"off\"></el-input>-->\n<!--        </el-form-item>-->\n        </div>\n        <el-form-item label=\"生年月日\" prop=\"bDay\">\n        <el-select v-model=\"studentForm.bYear\" class=\"col-3\" @change=\"fetchDay\" style=\"width: 8em\">\n            <el-option v-for=\"item in getYears()\"\n                       :key=\"item.value\"\n                       :label=\"item.value\"\n                       :value=\"item.value\">\n            </el-option>\n        </el-select>年\n            <el-select v-model=\"studentForm.bMonth\" class=\"col-3\" @change=\"fetchDay\" style=\"width: 8em;\">\n                <el-option v-for=\"item in getMonths()\"\n                           :key=\"item.value\"\n                           :label=\"item.value\"\n                           :value=\"item.value\">\n                </el-option>\n            </el-select>月\n            <el-select v-model=\"studentForm.bDay\" class=\"col-3\" :disabled=\"studentForm.bYear === '' || studentForm.bMonth === ''\" style=\"width: 8em\">\n                <el-option v-for=\"item in getDays(studentForm.bYear, studentForm.bMonth)\"\n                           :key=\"item.value\"\n                           :label=\"item.value\"\n                           :value=\"item.value\">\n                </el-option>\n            </el-select>日\n        </el-form-item>\n        <el-button style=\"float: right\" type=\"primary\" @click=\"regist\">登録</el-button>\n    </el-form>\n</template>\n\n<script>\n    import axios from 'axios'\n\n    export default {\n        name: \"StudentForm\",\n        data() {\n            return {\n                sameAs : false,\n                studentForm: {\n                    guardianId : this.$route.query.guardian,\n                    memberId : 0,\n                    id: 0,\n                    name: \"\",\n                    // firstName: \"\",\n                    nameKana: \"\",\n                    // firstKanaName: \"\",\n                    zip: \"\",\n                    pref: 0,\n                    addr : \"\",\n                    tel1: \"\",\n                    tel2: \"\",\n                    mail: \"\",\n                    notice : true,\n                    bYear : \"\",\n                    bMonth : \"\",\n                    bDay : \"\",\n                    // passwd : \"\"\n                },\n                years: [],\n                prefs: [\n                    { \"code\": 0, \"name\": \"選択してください\"},\n                    { \"code\": 1, \"name\": \"北海道\"},\n                    { \"code\": 2, \"name\": \"青森県\"},\n                    { \"code\": 3, \"name\": \"岩手県\"},\n                    { \"code\": 4, \"name\": \"宮城県\"},\n                    { \"code\": 5, \"name\": \"秋田県\"},\n                    { \"code\": 6, \"name\": \"山形県\"},\n                    { \"code\": 7, \"name\": \"福島県\"},\n                    { \"code\": 8, \"name\": \"茨城県\"},\n                    { \"code\": 9, \"name\": \"栃木県\"},\n                    { \"code\": 10, \"name\": \"群馬県\"},\n                    { \"code\": 11, \"name\": \"埼玉県\"},\n                    { \"code\": 12, \"name\": \"千葉県\"},\n                    { \"code\": 13, \"name\": \"東京都\"},\n                    { \"code\": 14, \"name\": \"神奈川県\"},\n                    { \"code\": 15, \"name\": \"新潟県\"},\n                    { \"code\": 16, \"name\": \"富山県\"},\n                    { \"code\": 17, \"name\": \"石川県\"},\n                    { \"code\": 18, \"name\": \"福井県\"},\n                    { \"code\": 19, \"name\": \"山梨県\"},\n                    { \"code\": 20, \"name\": \"長野県\"},\n                    { \"code\": 21, \"name\": \"岐阜県\"},\n                    { \"code\": 22, \"name\": \"静岡県\"},\n                    { \"code\": 23, \"name\": \"愛知県\"},\n                    { \"code\": 24, \"name\": \"三重県\"},\n                    { \"code\": 25, \"name\": \"滋賀県\"},\n                    { \"code\": 26, \"name\": \"京都府\"},\n                    { \"code\": 27, \"name\": \"大阪府\"},\n                    { \"code\": 28, \"name\": \"兵庫県\"},\n                    { \"code\": 29, \"name\": \"奈良県\"},\n                    { \"code\": 30, \"name\": \"和歌山県\"},\n                    { \"code\": 31, \"name\": \"鳥取県\"},\n                    { \"code\": 32, \"name\": \"島根県\"},\n                    { \"code\": 33, \"name\": \"岡山県\"},\n                    { \"code\": 34, \"name\": \"広島県\"},\n                    { \"code\": 35, \"name\": \"山口県\"},\n                    { \"code\": 36, \"name\": \"徳島県\"},\n                    { \"code\": 37, \"name\": \"香川県\"},\n                    { \"code\": 38, \"name\": \"愛媛県\"},\n                    { \"code\": 39, \"name\": \"高知県\"},\n                    { \"code\": 40, \"name\": \"福岡県\"},\n                    { \"code\": 41, \"name\": \"佐賀県\"},\n                    { \"code\": 42, \"name\": \"長崎県\"},\n                    { \"code\": 43, \"name\": \"熊本県\"},\n                    { \"code\": 44, \"name\": \"大分県\"},\n                    { \"code\": 45, \"name\": \"宮崎県\"},\n                    { \"code\": 46, \"name\": \"鹿児島県\"},\n                    { \"code\": 47, \"name\": \"沖縄県\"}\n                    ],\n                rules: {\n                    name: [\n                        { required: true, message: '入力必須です', trigger: 'blur' }\n                    ],\n                    // ame: [\n                    //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('お名前は必須事項です'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    // ],\n                    nameKana: [\n                        { required: true, message: '入力必須です', trigger: 'blur' },\n                        { pattern: /^[ァ-ヶー　 ]*$/, message: '全角カタカナで', trigger: 'blur' },\n\n                        // {\n                        //     validator: (rule, value, callback) => {\n                        //         if (!value) {\n                        //             return callback(new Error('フリガナは必須事項です'));\n                        //         }\n                        //         if(!value.match(/^[ァ-ヶー　]*$/)) {\n                        //             return callback(new Error('全角カタカナで入力してください'));\n                        //         }\n                        //     },\n                        //     trigger: 'blur'\n                        // }\n                    ],\n                    // ame: [\n                    //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('フリガナは必須事項です'));\n                    //             }\n                    //             if(!value.match(/^[ァ-ヶー　]*$/)) {\n                    //                 return callback(new Error('全角カタカナで入力してください'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    // ],\n                    zip: [\n                        { required: true, message: '入力必須です', trigger: 'blur' },\n                        { pattern: /^[0-9]{7}$/, message: '半角数字7桁', trigger: 'blur' },\n                        // {\n                        //     validator: (rule, value, callback) => {\n                        //         if (!value) {\n                        //             return callback(new Error('郵便番号は必須事項です'));\n                        //         }\n                        //         if(!value.match(/^[0-9]{7}$/)) {\n                        //             return callback(new Error('半角数字7桁で入力してください'));\n                        //         }\n                        //     },\n                        //     trigger: 'blur'\n                        // }\n                    ],\n                    pref: [\n                        { required: true, message: '入力必須です', trigger: 'blur' },\n                        { type : \"number\", min: 1, message: '選択してください', trigger: 'change' },\n                    //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (value === 0) {\n                    //                 return callback(new Error('都道府県を選択してください'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    ],\n                    addr: [\n                        { required: true, message: '入力必須です', trigger: 'blur' },\n                        //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('住所は必須事項です'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    ],\n                    tel: [\n                        { pattern: /^[0-9]{10}$|^[0-9]{11}$/, message: '半角数字で入力してください', trigger: 'blur' },\n                    //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('電話番号は必須事項です'));\n                    //             }\n                    //             if(!(value.match(/^[0-9]{10}$|^[0-9]{11}$/))) {\n                    //                 return callback(new Error('半角数字で入力してください'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    ],\n                    mail: [\n                        { type: \"email\", message: 'メールアドレスが間違っています', trigger: 'blur' },\n                        //     {\n                    //         validator: (rule, value, callback) => {\n                    //             if (!value) {\n                    //                 return callback(new Error('メールアドレスは必須事項です'));\n                    //             }\n                    //             if(!value.match(/^[\\w_\\-\\.]+@[\\w\\-\\.]+\\.\\w{2,}$/)) {\n                    //                 return callback(new Error('半角英数字で入力してください'));\n                    //             }\n                    //         },\n                    //         trigger: 'blur'\n                    //     }\n                    ],\n                    bYear: [\n                        {required: true, message: '入力必須です', trigger: ' blur'}\n                    ],\n                    bMonth: [\n                        {required: true, message: '入力必須です', trigger: ' blur'}\n                    ],\n                    bDay: [\n                        {required: true, message: '入力必須です', trigger: ' blur'}\n                    ],\n\n                    // passwd: [\n                    //     { required: true, message: '入力必須です', trigger: 'blur' },\n                    // ],\n                }\n            }\n        },\n        methods : {\n            fetchMemberId() {\n                if(this.sameAs) {\n                    this.studentForm.memberId = this.$route.query.guardian\n                    this.studentForm.notice = false\n                } else {\n                    this.studentForm.memberId = 0\n                    this.studentForm.notice = true\n                }\n            },\n            fetchDay() {\n                const year = this.studentForm.bYear\n                const month = this.studentForm.bMonth\n                const day = this.studentForm.bDay\n                if(year !== '' && month !== '' && day !== '') {\n                    const lastDay = new Date(year, month, 0).getDate()\n                    if(day > lastDay) {\n                        this.studentForm.bDay = 1\n                    }\n                }\n            },\n            getYears() {\n                let years = new Array()\n                const thisYear = new Date().getFullYear()\n                for(let y = 1920; y < thisYear; y++) {\n                    years.push({\"value\": y})\n                }\n                return years\n            },\n            getMonths() {\n                let months = new Array()\n                for(let m = 1; m <= 12; m++) {\n                    months.push({\"value\": m})\n                }\n                return months\n            },\n            getDays(year, month) {\n                let days = new Array()\n                const lastDay = new Date(year, month, 0).getDate()\n                for(let d = 1; d <= lastDay; d++) {\n                    days.push({\"value\": d})\n                }\n                return days\n            },\n            regist() {\n                this.$refs['studentForm'].validate((valied) => {\n                    if(valied) {\n                        axios.post('https://kinokolabo.herokuapp.com/student/regist', this.studentForm)\n                            .then(res => {\n                                console.log(\"登録完了 idは\" + res.data + \"です\")\n                                this.$router.push(\"/qrcode?id=\" + res.data)\n                            })\n                            .catch(error => {\n                                alert(\"エラー発生:\" + error)\n                            })\n                    }\n                });\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"]}]}